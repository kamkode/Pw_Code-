                                                        Assignment Questions 5 



1.class Solution {
    public int[][] construct2DArray(int[] original, int m, int n) {
        int length = original.length;
        if (m * n != length) {
            return new int[0][0];
        }
        
        int[][] result = new int[m][n];
        for (int i = 0; i < length; i++) {
            int row = i / n;
            int col = i % n;
            result[row][col] = original[i];
        }
        
        return result;
    }
}




2.class Solution {
    public int arrangeCoins(int n) {
        int completeRows = 0;
        int currentRow = 1;

        while (n >= currentRow) {
            n -= currentRow;
            currentRow++;
            completeRows++;
        }

        return completeRows;
    }

    public static void main(String[] args) {
        int n = 8;
        Solution solution = new Solution();
        int completeRows = solution.arrangeCoins(n);
        System.out.println("Number of complete rows: " + completeRows);
    }
}



3.import java.util.Arrays;

class Solution {
    public int[] sortedSquares(int[] nums) {
        int[] squares = new int[nums.length];
        int left = 0;
        int right = nums.length - 1;
        int index = nums.length - 1;

        while (left <= right) {
            int leftSquare = nums[left] * nums[left];
            int rightSquare = nums[right] * nums[right];

            if (leftSquare > rightSquare) {
                squares[index] = leftSquare;
                left++;
            } else {
                squares[index] = rightSquare;
                right--;
            }

            index--;
        }

        return squares;
    }

    public static void main(String[] args) {
        int[] nums = {-4, -1, 0, 3, 10};
        Solution solution = new Solution();
        int[] squaredNums = solution.sortedSquares(nums);
        System.out.println("Squared and sorted array: " + Arrays.toString(squaredNums));
    }
}



4.import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        List<List<Integer>> answer = new ArrayList<>();

        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();

        for (int num : nums1) {
            set1.add(num);
        }

        for (int num : nums2) {
            set2.add(num);
        }

        List<Integer> distinctNums1 = new ArrayList<>();
        List<Integer> distinctNums2 = new ArrayList<>();

        for (int num : nums1) {
            if (!set2.contains(num) && !distinctNums1.contains(num)) {
                distinctNums1.add(num);
            }
        }

        for (int num : nums2) {
            if (!set1.contains(num) && !distinctNums2.contains(num)) {
                distinctNums2.add(num);
            }
        }

        answer.add(distinctNums1);
        answer.add(distinctNums2);

        return answer;
    }
}



5.class Solution {
    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {
        int distanceValue = 0;

        for (int num1 : arr1) {
            boolean valid = true;

            for (int num2 : arr2) {
                if (Math.abs(num1 - num2) <= d) {
                    valid = false;
                    break;
                }
            }

            if (valid) {
                distanceValue++;
            }
        }

        return distanceValue;
    }
}



6.import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> duplicates = new ArrayList<>();

        for (int i = 0; i < nums.length; i++) {
            int index = Math.abs(nums[i]) - 1;
            if (nums[index] < 0) {
                duplicates.add(Math.abs(nums[i]));
            } else {
                nums[index] = -nums[index];
            }
        }

        for (int i = 0; i < nums.length; i++) {
            nums[i] = Math.abs(nums[i]);
        }

        return duplicates;
    }
}



7.class Solution {
    public int findMin(int[] nums) {
        int left = 0;
        int right = nums.length - 1;

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] > nums[right]) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }

        return nums[left];
    }
}


8.import java.util.*;

class Solution {
    public int[] findOriginalArray(int[] changed) {
        if (changed.length % 2 != 0) {
            // If the length is odd, it cannot be a doubled array
            return new int[0];
        }
        
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : changed) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        List<Integer> original = new ArrayList<>();
        Arrays.sort(changed);
        
        for (int num : changed) {
            if (frequencyMap.getOrDefault(num, 0) == 0) {
                // This number is already used or it's not doubled
                continue;
            }
            
            // Update frequency
            frequencyMap.put(num, frequencyMap.get(num) - 1);
            
            int doubledNum = num * 2;
            if (frequencyMap.getOrDefault(doubledNum, 0) == 0) {
                // If the doubled number is not found, it's not a doubled array
                return new int[0];
            }
            
            // Update frequency
            frequencyMap.put(doubledNum, frequencyMap.get(doubledNum) - 1);
            
            original.add(num);
        }
        
        int[] result = new int[original.size()];
        for (int i = 0; i < original.size(); i++) {
            result[i] = original.get(i);
        }
        
        return result;
    }
}