                                               Assignment Questions 2

1.import java.util.Arrays;

public class Solution {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int sum = 0;

        for (int i = 0; i < nums.length; i += 2) {
            sum += nums[i];
        }

        return sum;
    }
}



2.import java.util.HashSet;

public class Solution {
    public int distributeCandies(int[] candyType) {
        int n = candyType.length;
        int maxUniqueCandies = n / 2;

        HashSet<Integer> uniqueCandies = new HashSet<>();
        for (int candy : candyType) {
            uniqueCandies.add(candy);
        }

        int uniqueCount = uniqueCandies.size();

        return Math.min(uniqueCount, maxUniqueCandies);
    }
}




3.import java.util.HashMap;

public class Solution {
    public int findLHS(int[] nums) {
        HashMap<Integer, Integer> frequencyMap = new HashMap<>();
        int maxLength = 0;

        // Count the frequency of each number
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // Check for harmonious subsequences
        for (int num : frequencyMap.keySet()) {
            if (frequencyMap.containsKey(num + 1)) {
                int currentLength = frequencyMap.get(num) + frequencyMap.get(num + 1);
                maxLength = Math.max(maxLength, currentLength);
            }
        }

        return maxLength;
    }
}





4.public class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count = 0;
        int length = flowerbed.length;
        int i = 0;

        while (i < length) {
            // Check if the current plot is empty and its adjacent plots are also empty
            if (flowerbed[i] == 0 && (i == 0 || flowerbed[i - 1] == 0) && (i == length - 1 || flowerbed[i + 1] == 0)) {
                // Plant a flower in the current plot
                flowerbed[i] = 1;
                count++;

                // Check if the required number of flowers have been planted
                if (count == n) {
                    return true;
                }
            }

            i++;
        }

        return count >= n;
    }
}




5.import java.util.Arrays;

public class Solution {
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);

        int n = nums.length;
        // Compare the product of the three largest numbers with the product of the two smallest numbers and the largest number
        int product1 = nums[n - 1] * nums[n - 2] * nums[n - 3];
        int product2 = nums[0] * nums[1] * nums[n - 1];

        return Math.max(product1, product2);
    }
}





6.public class Solution {
    public int search(int[] nums, int target) {
        return binarySearch(nums, target, 0, nums.length - 1);
    }

    private int binarySearch(int[] nums, int target, int left, int right) {
        if (left > right) {
            return -1; // Base case: target not found
        }

        int mid = left + (right - left) / 2;

        if (nums[mid] == target) {
            return mid; // Base case: target found
        } else if (nums[mid] < target) {
            return binarySearch(nums, target, mid + 1, right); // Recursively search the right half
        } else {
            return binarySearch(nums, target, left, mid - 1); // Recursively search the left half
        }
    }
}




7.public class Solution {
    public boolean isMonotonic(int[] nums) {
        boolean increasing = true;
        boolean decreasing = true;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < nums[i - 1]) {
                increasing = false;
            }
            if (nums[i] > nums[i - 1]) {
                decreasing = false;
            }
        }

        return increasing || decreasing;
    }
}



8.import java.util.Arrays;

public class Solution {
    public int minDifference(int[] nums, int k) {
        int n = nums.length;
        
        if (n <= 4) {
            return 0;
        }
        
        Arrays.sort(nums);
        
        int minScore = Integer.MAX_VALUE;
        
        for (int i = 0; i <= k; i++) {
            minScore = Math.min(minScore, nums[n - k - 1 + i] - nums[i]);
        }
        
        return minScore;
    }
}
