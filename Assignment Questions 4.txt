                                                     Assignment Questions 4 



1.import java.util.ArrayList;
import java.util.List;

public class CommonElementsInArrays {
    public static List<Integer> findCommonElements(int[] arr1, int[] arr2, int[] arr3) {
        List<Integer> commonElements = new ArrayList<>();
        
        int i = 0, j = 0, k = 0;
        while (i < arr1.length && j < arr2.length && k < arr3.length) {
            if (arr1[i] == arr2[j] && arr2[j] == arr3[k]) {
                commonElements.add(arr1[i]);
                i++;
                j++;
                k++;
            } else if (arr1[i] < arr2[j]) {
                i++;
            } else if (arr2[j] < arr3[k]) {
                j++;
            } else {
                k++;
            }
        }
        
        return commonElements;
    }
    
    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3, 4, 5};
        int[] arr2 = {1, 2, 5, 7, 9};
        int[] arr3 = {1, 3, 4, 5, 8};
        
        List<Integer> commonElements = findCommonElements(arr1, arr2, arr3);
        System.out.println(commonElements);
    }
}




2.import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        List<List<Integer>> answer = new ArrayList<>();

        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();

        for (int num : nums1) {
            set1.add(num);
        }

        for (int num : nums2) {
            set2.add(num);
        }

        List<Integer> distinctNums1 = new ArrayList<>();
        List<Integer> distinctNums2 = new ArrayList<>();

        for (int num : nums1) {
            if (!set2.contains(num) && !distinctNums1.contains(num)) {
                distinctNums1.add(num);
            }
        }

        for (int num : nums2) {
            if (!set1.contains(num) && !distinctNums2.contains(num)) {
                distinctNums2.add(num);
            }
        }

        answer.add(distinctNums1);
        answer.add(distinctNums2);

        return answer;
    }
}


3.class Solution {
    public int[][] transpose(int[][] matrix) {
        int rows = matrix.length;
        int columns = matrix[0].length;

        int[][] transposeMatrix = new int[columns][rows];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                transposeMatrix[j][i] = matrix[i][j];
            }
        }

        return transposeMatrix;
    }

    public static void main(String[] args) {
        int[][] matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};

        Solution solution = new Solution();
        int[][] transposeMatrix = solution.transpose(matrix);

        System.out.println("Original Matrix:");
        printMatrix(matrix);

        System.out.println("Transposed Matrix:");
        printMatrix(transposeMatrix);
    }

    public static void printMatrix(int[][] matrix) {
        int rows = matrix.length;
        int columns = matrix[0].length;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
}


4.import java.util.Arrays;

class Solution {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums); // Sort the array in ascending order

        int maxSum = 0;
        for (int i = 0; i < nums.length; i += 2) {
            maxSum += nums[i]; // Sum the minimum value in each pair
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[] nums = {1, 4, 3, 2};
        Solution solution = new Solution();
        int maxSum = solution.arrayPairSum(nums);
        System.out.println("Maximized sum: " + maxSum);
    }
}


5.class Solution {
    public int arrangeCoins(int n) {
        int completeRows = 0;
        int currentRow = 1;

        while (n >= currentRow) {
            n -= currentRow;
            currentRow++;
            completeRows++;
        }

        return completeRows;
    }

    public static void main(String[] args) {
        int n = 8;
        Solution solution = new Solution();
        int completeRows = solution.arrangeCoins(n);
        System.out.println("Number of complete rows: " + completeRows);
    }
}


6.import java.util.Arrays;

class Solution {
    public int[] sortedSquares(int[] nums) {
        int[] squares = new int[nums.length];
        int left = 0;
        int right = nums.length - 1;
        int index = nums.length - 1;

        while (left <= right) {
            int leftSquare = nums[left] * nums[left];
            int rightSquare = nums[right] * nums[right];

            if (leftSquare > rightSquare) {
                squares[index] = leftSquare;
                left++;
            } else {
                squares[index] = rightSquare;
                right--;
            }

            index--;
        }

        return squares;
    }

    public static void main(String[] args) {
        int[] nums = {-4, -1, 0, 3, 10};
        Solution solution = new Solution();
        int[] squaredNums = solution.sortedSquares(nums);
        System.out.println("Squared and sorted array: " + Arrays.toString(squaredNums));
    }
}


7.class Solution {
    public int maxCount(int m, int n, int[][] ops) {
        int minRow = m;
        int minCol = n;

        for (int[] op : ops) {
            minRow = Math.min(minRow, op[0]);
            minCol = Math.min(minCol, op[1]);
        }

        return minRow * minCol;
    }

    public static void main(String[] args) {
        int m = 3;
        int n = 3;
        int[][] ops = {{2, 2}, {3, 3}};
        Solution solution = new Solution();
        int maxIntegers = solution.maxCount(m, n, ops);
        System.out.println("Number of maximum integers: " + maxIntegers);
    }
}



8.import java.util.Arrays;

class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] result = new int[2 * n];
        int index = 0;

        for (int i = 0; i < n; i++) {
            result[index++] = nums[i];
            result[index++] = nums[i + n];
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {2, 5, 1, 3, 4, 7};
        int n = 3;
        Solution solution = new Solution();
        int[] shuffledArray = solution.shuffle(nums, n);
        System.out.println("Shuffled array: " + Arrays.toString(shuffledArray));
    }
}
