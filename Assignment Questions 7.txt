                           Assignment Questions 7 



1.import java.util.HashMap;

class Solution {
    public boolean isIsomorphic(String s, String t) {
        if (s.length() != t.length())
            return false;

        HashMap<Character, Character> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char charS = s.charAt(i);
            char charT = t.charAt(i);

            if (map.containsKey(charS)) {
                if (map.get(charS) != charT)
                    return false;
            } else {
                if (map.containsValue(charT))
                    return false;
                map.put(charS, charT);
            }
        }

        return true;
    }
}



2.import java.util.HashMap;

public class StrobogrammaticNumber {
    public boolean isStrobogrammatic(String num) {
        HashMap<Character, Character> validPairs = new HashMap<>();
        validPairs.put('0', '0');
        validPairs.put('1', '1');
        validPairs.put('6', '9');
        validPairs.put('8', '8');
        validPairs.put('9', '6');

        int left = 0;
        int right = num.length() - 1;

        while (left <= right) {
            char leftChar = num.charAt(left);
            char rightChar = num.charAt(right);

            if (!validPairs.containsKey(leftChar) || validPairs.get(leftChar) != rightChar) {
                return false;
            }

            left++;
            right--;
        }

        return true;
    }

    public static void main(String[] args) {
        StrobogrammaticNumber solution = new StrobogrammaticNumber();

        // Example 1: "69"
        String num1 = "69";
        System.out.println(num1 + " is strobogrammatic? " + solution.isStrobogrammatic(num1)); // Output: true

        // Example 2: "88"
        String num2 = "88";
        System.out.println(num2 + " is strobogrammatic? " + solution.isStrobogrammatic(num2)); // Output: true

        // Example 3: "818"
        String num3 = "818";
        System.out.println(num3 + " is strobogrammatic? " + solution.isStrobogrammatic(num3)); // Output: false

        // Example 4: "6922"
        String num4 = "6922";
        System.out.println(num4 + " is strobogrammatic? " + solution.isStrobogrammatic(num4)); // Output: false
    }
}



3.import java.math.*;
class Solution {
    public String addStrings(String num1, String num2) {
        return String.valueOf((new BigInteger(num1)).add(new BigInteger(num2)));
    }
}



4.class Solution {
    public String reverseWords(String s) {        
        String x = "";        
        for(String t : s.split(" ")) 
            x += new StringBuilder(t).reverse().toString()+" ";
        return x.trim();
    }
}


5.class Solution {
    public String reverseStr(String s, int k) {
        char[] str = s.toCharArray();
        int n = str.length;
        for(int i = 0 ; i <= n-1; i += 2*k){
            if(i+k-1 <= n-1){
                reverseK(i,i+k-1,str);
            }else{
				//for fewer than k characters left (edge case)
                reverseK(i,n-1,str);
            }
        }
        String ans = new String(str);
        return ans;
    }
    public void reverseK(int i, int j, char[] str){
        while(i < j){
            char temp = str[i];
            str[i] = str[j];
            str[j] = temp;
            i++;
            j--;
        }
    }
}

6.class Solution {
    public String shift(String s){
        String ans = "";
        for(int i=1;i<s.length();i++){
            ans += s.charAt(i);
            if(i == s.length()-1){
                ans += s.charAt(0);
            } 
        }
        return ans;
    }

    public boolean rotateString(String s, String goal) {
        boolean ans = false;
        int n = s.length();
        while(n!=0){
            if(s.equals(goal)){
                ans = true;
                break;
            }else{
                s = shift(s);
            }
            n--;
        }

        return ans;
    }
}



7.class Solution {
    public boolean backspaceCompare(String s, String t) {
        Stack<Character> stack1= new Stack<>();
        Stack<Character> stack2=new Stack<>();
        for(int i=0;i<s.length();i++){
            char c= s.charAt(i);
            if(!stack1.isEmpty() && c =='#') stack1.pop();
            else{
                if(c!='#') 
                    stack1.push(c);

             }
        }

        for(int i=0;i<t.length();i++){
            char d= t.charAt(i);
            if(!stack2.isEmpty() && d=='#') stack2.pop();
           else{
                if(d!='#') 
                    stack2.push(d);

             }
        }
        
    //   String s="";
      
return stack1.equals(stack2);
    }
}



8.class Solution {
    public boolean checkStraightLine(int[][] coordinates) {
        if(coordinates.length<=2) return true;
        int x0= coordinates[0][0];
        int y0= coordinates[0][1];
        int x1=coordinates[1][0];
        int y1= coordinates[1][1];
        // double slope=(double) (y1-y0)/(x1-x0);
        for(int i=2;i<coordinates.length;i++){
            int x=coordinates[i][0];
            int y= coordinates[i][1];
            // double varslope=(double)(y-y0)/(x-x0);
            // if(slope!=varslope || ) return false; 

            if((y1-y0)*(x-x0)!= (y-y0)*(x1-x0)) return false;
        }
    return true;
    }
}